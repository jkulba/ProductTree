---
// Search component with Fuse.js integration
---

<div class="relative">
  <div class="relative">
    <div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
      <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </div>
    <input
      type="text"
      id="search-input"
      class="block w-full rounded-lg border border-gray-300 bg-white py-2 pl-10 pr-3 text-sm placeholder:text-gray-400 focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500"
      placeholder="Search documentation..."
      autocomplete="off"
    />
  </div>
  
  <!-- Search results dropdown -->
  <div
    id="search-results"
    class="absolute z-10 mt-1 w-full hidden bg-white border border-gray-200 rounded-lg shadow-lg max-h-96 overflow-y-auto"
  >
    <div id="search-results-content" class="py-2">
      <!-- Results will be populated here -->
    </div>
  </div>
</div>

<script>
  // Import Fuse.js using dynamic import to ensure it works in both dev and production
  let Fuse: any;
  let searchIndex: any[] = [];
  let fuse: any;
  
  // Initialize search
  async function initializeSearch() {
    try {
      // Dynamic import of Fuse.js
      const fuseModule = await import('fuse.js');
      Fuse = fuseModule.default;
      
      // Fetch search index with error handling
      const response = await fetch('/search-index.json');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      searchIndex = await response.json();
      console.log('Search index loaded:', searchIndex.length, 'documents');
      
      const options = {
        keys: [
          { name: 'title', weight: 0.3 },
          { name: 'tags', weight: 0.25 },
          { name: 'description', weight: 0.2 },
          { name: 'keywords', weight: 0.1 },
          { name: 'app', weight: 0.1 },
          { name: 'category', weight: 0.05 }
        ],
        threshold: 0.3,
        includeScore: true,
        includeMatches: true,
        minMatchCharLength: 2
      };
      
      fuse = new Fuse(searchIndex, options);
      console.log('Search initialized successfully');
    } catch (error) {
      console.error('Failed to load search index:', error);
    }
  }
  
  // Perform search
  function search(query: string) {
    if (!fuse || !query.trim()) {
      hideResults();
      return;
    }
    
    const results = fuse.search(query);
    console.log('Search results for:', query, results);
    displayResults(results);
  }
  
  // Display search results
  function displayResults(results: any[]) {
    const resultsContainer = document.getElementById('search-results-content');
    const resultsDropdown = document.getElementById('search-results');
    
    if (!resultsContainer || !resultsDropdown) return;
    
    if (results.length === 0) {
      resultsContainer.innerHTML = '<div class="px-4 py-2 text-gray-500">No results found</div>';
    } else {
      resultsContainer.innerHTML = results
        .slice(0, 10) // Limit to 10 results
        .map(result => {
          const { item } = result;
          return `
            <a href="${item.url}" class="block px-4 py-2 hover:bg-gray-50 border-b border-gray-100 last:border-b-0">
              <div class="font-medium text-gray-900">${item.title}</div>
              <div class="text-sm text-gray-500">${item.app}</div>
              ${item.excerpt ? `<div class="text-sm text-gray-600 mt-1">${item.excerpt}</div>` : ''}
            </a>
          `;
        })
        .join('');
    }
    
    resultsDropdown.classList.remove('hidden');
  }
  
  // Hide search results
  function hideResults() {
    const resultsDropdown = document.getElementById('search-results');
    resultsDropdown?.classList.add('hidden');
  }
  
  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Initializing search...');
    initializeSearch();
    
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    
    if (searchInput) {
      let searchTimeout: ReturnType<typeof setTimeout>;
      
      searchInput.addEventListener('input', (e) => {
        clearTimeout(searchTimeout);
        const query = (e.target as HTMLInputElement).value;
        
        searchTimeout = setTimeout(() => {
          search(query);
        }, 300);
      });
      
      searchInput.addEventListener('focus', () => {
        if (searchInput.value.trim()) {
          search(searchInput.value);
        }
      });
      
      // Hide results when clicking outside
      document.addEventListener('click', (e) => {
        const searchResults = document.getElementById('search-results');
        if (!searchInput.contains(e.target as Node) && !searchResults?.contains(e.target as Node)) {
          hideResults();
        }
      });
      
      // Handle keyboard navigation
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          hideResults();
          searchInput.blur();
        }
      });
    }
  });
</script>